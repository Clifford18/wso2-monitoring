{"doc":"","fields":[],"enumConstants":[],"methods":[{"name":"encodeText","paramTypes":["java.lang.String"],"doc":" To make sure email clients can interpret text properly, we need to encode some values according to RFC-2047.\n"},{"name":"readInputStreamToString","paramTypes":["java.io.InputStream","java.nio.charset.Charset"],"doc":" Uses standard JDK java to read an inputstream to String using the given encoding (in {@link ByteArrayOutputStream#toString(String)}).\n"},{"name":"readInputStreamToBytes","paramTypes":["java.io.InputStream"],"doc":" Uses standard JDK java to read an inputstream to byte[].\n"},{"name":"extractEmailAddresses","paramTypes":["java.lang.String"],"doc":" Recognizes the tails of each address entry, so it can replace the [';] delimiters, thereby disambiguating the delimiters, since they can\n appear in names as well (making it difficult to split on [,;] delimiters.\n\n @param emailAddressList The delimited list of addresses (or single address) optionally including the name.\n @return Array of address entries optionally including the names, trimmed for spaces or trailing delimiters.\n"},{"name":"interpretRecipient","paramTypes":["java.lang.String","boolean","java.lang.String","javax.mail.Message.RecipientType"],"doc":" @param name         The name to use as fixed name or as default (depending on <code>fixedName</code> flag). Regardless of that flag, if a name\n                     is <code>null</code>, the other one will be used.\n @param fixedName    Determines if the given name should be used as override.\n @param emailAddress An RFC2822 compliant email address, which can contain a name inside as well.\n"}]}