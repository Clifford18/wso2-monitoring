{"doc":" Mailing tool created exclusively using {@link MailerRegularBuilder}. This class is the facade to most Simple Java Mail functionality\n which is related to doing things with an email (server not always relevant, like with validation, S/MIME encryption etc.).\n <p>\n The e-mail message structure is built to work with all e-mail clients and has been tested with many different webclients as well as some desktop\n applications. You can <a href=\"http://www.simplejavamail.org/rfc-compliant.html#section-explore-multipart\">experiment</a> with the various types of emails and resulting mime structure on the Simple Java Mail mail website.\n <p>\n <strong>Note: </strong>if the <a href=\"http://www.simplejavamail.org/modules.html#batch-module\">batch-module</a>\n is loaded when building a mailer, it will also register itself with the cluster using the provided or random cluster key, so other mailers using the same cluster key immediately start having\n access to this new server.\n <p>\n <a href=\"http://www.simplejavamail.org\">simplejavamail.org</a>\n\n @see MailerRegularBuilder\n @see Email\n","fields":[],"enumConstants":[],"methods":[{"name":"getSession","paramTypes":[],"doc":" In case Simple Java Mail falls short somehow, you can get a hold of the internal {@link Session} instance to debug or tweak. Please let us know\n why you are needing this on https://github.com/bbottema/simple-java-mail/issues.\n"},{"name":"testConnection","paramTypes":[],"doc":" Delegates to {@link #testConnection(boolean)} with async == <code>false</code>.\n"},{"name":"testConnection","paramTypes":["boolean"],"doc":" Tries to connect to the configured SMTP server, including (authenticated) proxy if set up.\n <p>\n Note: synchronizes on the thread for sending mails so that we don't get into race condition conflicts with emails actually being sent.\n\n @return An AsyncResponse in case of async == true, otherwise <code>null</code>.\n"},{"name":"sendMail","paramTypes":["org.simplejavamail.api.email.Email"],"doc":" Delegates to {@link #sendMail(Email, boolean)}, with <code>async = false</code>. This method returns only when the email has been processed by\n the target SMTP server.\n"},{"name":"sendMail","paramTypes":["org.simplejavamail.api.email.Email","boolean"],"doc":" Processes an {@link Email} instance into a completely configured {@link Message}.\n <p>\n Sends the JavaMail {@link Message} object using {@link Session#getTransport()}. It will call {@link Transport#connect()} assuming all\n connection details have been configured in the provided {@link Session} instance and finally {@link Transport#sendMessage(Message,\n javax.mail.Address[])}.\n <p>\n Performs a call to {@link Message#saveChanges()} as the Sun JavaMail API indicates it is needed to configure the message headers and providing\n a message id.\n <p>\n If the email should be sent asynchrounously - perhaps as part of a batch, then a new thread is started using the <em>executor</em> for\n thread pooling.\n <p>\n If the email should go through an authenticated proxy server, then the SOCKS proxy bridge is started if not already running. When the last\n email in a batch has finished, the proxy bridging server is shut down.\n\n @param email The information for the email to be sent.\n @param async If false, this method blocks until the mail has been processed completely by the SMTP server. If true, a new thread is started to\n              send the email and this method returns immediately.\n @return A {@link AsyncResponse} or null if not <em>async</em>.\n @throws MailException Can be thrown if an email isn't validating correctly, or some other problem occurs during connection, sending etc.\n @see java.util.concurrent.Executors#newFixedThreadPool(int)\n @see #validate(Email)\n"},{"name":"validate","paramTypes":["org.simplejavamail.api.email.Email"],"doc":" Validates an {@link Email} instance. Validation fails if the subject is missing, content is missing, or no recipients are defined or that\n the addresses are missing for NPM notification flags.\n <p>\n It also checks for illegal characters that would facilitate injection attacks:\n <ul>\n <li>http://www.cakesolutions.net/teamblogs/2008/05/08/email-header-injection-security</li>\n <li>https://security.stackexchange.com/a/54100/110048</li>\n <li>https://www.owasp.org/index.php/Testing_for_IMAP/SMTP_Injection_(OTG-INPVAL-011)</li>\n <li>http://cwe.mitre.org/data/definitions/93.html</li>\n </ul>\n\n @param email The email that needs to be configured correctly.\n\n @return Always <code>true</code> (throws a {@link MailException} exception if validation fails).\n @throws MailException Is being thrown in any of the above causes.\n @see EmailAddressValidator\n"},{"name":"shutdownConnectionPool","paramTypes":[],"doc":" Shuts down the connection pool associated with this {@link Mailer} instance and closes remaining open connections. Waits until all connections still in use become available again\n to deallocate them as well.\n <p>\n <strong>Note:</strong> In order to shut down the whole connection pool (in case of clustering), each individual {@link Mailer} instance should be shutdown.\n <p>\n <strong>Note:</strong> This does *not* shut down the executor service if it was provided by the user.\n <p>\n <strong>Note:</strong> this is only works in combination with the {@value org.simplejavamail.internal.modules.BatchModule#NAME}.\n"},{"name":"getServerConfig","paramTypes":[],"doc":" @return The server connection details. Will be {@code null} in case a custom fixed {@link Session} instance is used.\n @see MailerRegularBuilder#withSMTPServer(String, Integer, String, String)\n"},{"name":"getTransportStrategy","paramTypes":[],"doc":" @return The transport strategy to be used. Will be {@code null} in case a custom fixed {@link Session} instance is used.\n @see org.simplejavamail.api.mailer.MailerRegularBuilder#withTransportStrategy(TransportStrategy)\n @see EmailAddressCriteria\n"},{"name":"getProxyConfig","paramTypes":[],"doc":" @return The proxy connection details. Will be empty if no proxy is required.\n"},{"name":"getOperationalConfig","paramTypes":[],"doc":" @return The operational parameters defined using a mailer builder. Includes general things like session timeouts, debug mode, SSL config etc.\n"},{"name":"getEmailAddressCriteria","paramTypes":[],"doc":" @return The effective validation criteria used for email validation. Returns an empty set if no validation should be done.\n @see MailerGenericBuilder#withEmailAddressCriteria(EnumSet)\n @see EmailAddressCriteria\n"}]}