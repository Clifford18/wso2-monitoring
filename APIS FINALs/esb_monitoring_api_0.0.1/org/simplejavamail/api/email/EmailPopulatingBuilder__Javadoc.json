{"doc":" Fluent interface Builder for populating {@link Email} instances. An instance of this builder can only be obtained through one of the builder\n starters on {@link EmailStartingBuilder}.\n <p>\n NOTE: for some reason, JavaDoc is not able to parse all {@code @link} directives used in this class' documentation. I have no idea why, if you can figure\n it out, please let me know!\n","fields":[{"name":"IMG_SRC_PATTERN","doc":" Regular Expression to find all {@code <img src=\"...\">} entries in an HTML document.It needs to cater for various things, like more whitespaces including newlines on any place, HTML is not case\n sensitive and there can be arbitrary text between \"IMG\" and \"SRC\" like IDs and other things.\n"}],"enumConstants":[],"methods":[{"name":"buildEmail","paramTypes":[],"doc":" Validated DKIM values and then delegates to {@link Email#Email(EmailPopulatingBuilder)} with <code>this</code> as argument.\n"},{"name":"fixingMessageId","paramTypes":["java.lang.String"],"doc":" Sets optional ID to a fixed value, which is otherwise generated by the underlying JavaMail framework when sending the email.\n <p>\n <strong>Note 1:</strong> ID is user-controlled. Only when converting an email, Simple Java Mail might fill the sent-date.\n <br>\n <strong>Note 2:</strong> The id-format should be conform <a href=\"https://tools.ietf.org/html/rfc5322#section-3.6.4\">rfc5322#section-3.6.4</a>\n\n @param id The mime message id, example: {@code <123@456>}\n"},{"name":"from","paramTypes":["java.lang.String"],"doc":" Delegates to {@link #from(String, String)} with empty name.\n\n @param fromAddress The sender address visible to receivers of the email.\n"},{"name":"from","paramTypes":["java.lang.String","java.lang.String"],"doc":" Delegates to {@link #from(Recipient)} with a new {@link Recipient} wrapped around the given name and email address.\n\n @param name The name that will be visible to the receivers of this email.\n @param fromAddress The address that will be visible to the receivers of this email.\n"},{"name":"from","paramTypes":["java.lang.String","javax.mail.internet.InternetAddress"],"doc":" Delegates to {@link #from(Recipient)} with a new {@link Recipient} wrapped around the given fixed name and email address.\n"},{"name":"from","paramTypes":["javax.mail.internet.InternetAddress"],"doc":" Delegates to {@link #from(Recipient)} with a new {@link Recipient} wrapped around the given email address.\n"},{"name":"from","paramTypes":["org.simplejavamail.api.email.Recipient"],"doc":" Sets the address of the sender of this email with given {@link Recipient} (ignoring its {@link Message.RecipientType} if provided).\n <p>\n Can be used in conjunction with one of the {@code replyTo(...)} methods, which is then prioritized by email clients when replying to this\n email.\n\n @param recipient Preconfigured recipient which includes optional name and mandatory email address.\n\n @see #from(String, String)\n @see #from(String)\n @see #withReplyTo(Recipient)\n"},{"name":"withReplyTo","paramTypes":["java.lang.String"],"doc":" Delegates to {@link #withReplyTo(Recipient)} with a  new {@link Recipient} wrapped around the given email address (or null if missing).\n\n @param replyToAddress The address that receivers will get when they reply to the email.\n"},{"name":"withReplyTo","paramTypes":["java.lang.String","java.lang.String"],"doc":" Delegates to {@link #withReplyTo(Recipient)} with a new {@link Recipient} wrapped around the given fixed name and email address.\n\n @param fixedName Optional name that receivers will get when they reply to the email.\n @param replyToAddress The address that receivers will get when they reply to the email. Any name included in the address will be ignored.\n"},{"name":"withReplyTo","paramTypes":["javax.mail.internet.InternetAddress"],"doc":" Delegates to {@link #withReplyTo(Recipient)} with a  new {@link Recipient} wrapped around the given address.\n"},{"name":"withReplyTo","paramTypes":["java.lang.String","javax.mail.internet.InternetAddress"],"doc":" Delegates to {@link #withReplyTo(Recipient)} with a new {@link Recipient} wrapped around the given fixed name and address.\n"},{"name":"withReplyTo","paramTypes":["org.simplejavamail.api.email.Recipient"],"doc":" Sets the <em>replyTo</em> address of this email with given {@link Recipient} (ignoring its {@link Message.RecipientType} if provided).\n <p>\n If provided, email clients should prioritize the <em>replyTo</em> recipient over the <em>from</em> recipient when replying to this email.\n\n @param recipient Preconfigured recipient which includes optional name and mandatory email address.\n\n @see #withReplyTo(String, String)\n"},{"name":"withBounceTo","paramTypes":["java.lang.String"],"doc":" Delegates to {@link #withBounceTo(Recipient)} with a new {@link Recipient} wrapped around the email address (or null if missing).\n\n @param bounceToAddress The address of the receiver of the bounced email\n"},{"name":"withBounceTo","paramTypes":["java.lang.String","java.lang.String"],"doc":" Delegates to {@link #withBounceTo(Recipient)} with a new {@link Recipient} wrapped around the given name and email address.\n\n @param name Name of the receiver of the bounced email\n @param bounceToAddress The address of the receiver of the bounced email\n"},{"name":"withBounceTo","paramTypes":["javax.mail.internet.InternetAddress"],"doc":" Delegates to {@link #withBounceTo(Recipient)} with a new {@link Recipient} wrapped around the given address.\n"},{"name":"withBounceTo","paramTypes":["java.lang.String","javax.mail.internet.InternetAddress"],"doc":" Delegates to {@link #withBounceTo(Recipient)} with a new {@link Recipient} wrapped around the given fixed name and address.\n"},{"name":"withBounceTo","paramTypes":["org.simplejavamail.api.email.Recipient"],"doc":" Sets the <em>bounceTo</em> address of this email with given {@link Recipient} (ignoring its {@link Message.RecipientType} if provided).\n <p>\n If provided, SMTP server should return bounced emails to this address. This is also known as the {@code Return-Path} (or <em>Envelope\n FROM</em>).\n\n @param recipient Preconfigured recipient which includes optional name and mandatory email address.\n\n @see #withBounceTo(String, String)\n"},{"name":"withSubject","paramTypes":["java.lang.String"],"doc":" Sets the optional subject of this email.\n\n @param subject Optional text to be used in the subject field of the email.\n"},{"name":"withPlainText","paramTypes":["java.io.File"],"doc":" Delegates to {@link #withPlainText(String)}.\n\n @param textFile Plain text to set as email body (overwrites any previous plain text body). If no HTML body is included as well, plain text\n                would be used instead by the email client.\n"},{"name":"withPlainText","paramTypes":["java.lang.String"],"doc":" Sets the optional email message body in plain text.\n <p>\n Both text and HTML can be provided, which will  be offered to the email client as alternative content. Email clients that support it, will\n favor HTML over plain text and ignore the text body completely.\n\n @param text Plain text to set as email body (overwrites any previous plain text body). If no HTML body is included as well, plain text\n                would be used instead by the email client.\n\n @see #withPlainText(File)\n @see #prependText(String)\n @see #appendText(String)\n"},{"name":"prependText","paramTypes":["java.io.File"],"doc":" Delegates to {@link #prependText(String)}.\n\n @param textFile The plain text to prepend to whatever plain text is already there.\n"},{"name":"prependText","paramTypes":["java.lang.String"],"doc":" Prepends text to the current plain text body (or starts it if plain text body is missing).\n\n @param text The plain text to prepend to whatever plain text is already there.\n\n @see #prependText(File)\n @see #appendText(String)\n @see #withPlainText(String)\n"},{"name":"appendText","paramTypes":["java.io.File"],"doc":" Delegates to {@link #appendText(String)}.\n\n @param textFile The plain text to append to whatever plain text is already there.\n"},{"name":"appendText","paramTypes":["java.lang.String"],"doc":" Appends text to the current plain text body (or starts it if plain text body is missing).\n\n @param text The plain text to append to whatever plain text is already there.\n\n @see #appendText(File)\n @see #prependText(String)\n @see #withPlainText(String)\n"},{"name":"withHTMLText","paramTypes":["java.io.File"],"doc":" Delegates to {@link #withHTMLText(String)}.\n\n @param textHTMLFile HTML text to set as email body (overwrites any previous HTML text body). If no HTML body is included, plain text\n                would be used instead by the email client if provided.\n"},{"name":"withHTMLText","paramTypes":["java.lang.String"],"doc":" Sets the optional email message body in HTML text.\n <p>\n Both text and HTML can be provided, which will  be offered to the email client as alternative content. Email clients that support it, will\n favor HTML over plain text and ignore the text body completely.\n\n @param textHTML HTML text to set as email body (overwrites any previous HTML text body). If no HTML body is included, plain text\n                would be used instead by the email client if provided.\n\n @see #withHTMLText(File)\n @see #prependTextHTML(String)\n @see #appendTextHTML(String)\n"},{"name":"prependTextHTML","paramTypes":["java.io.File"],"doc":" Delegates to {@link #prependTextHTML(String)}.\n\n @param textHTMLFile The HTML text to prepend to whatever is already there in the body.\n"},{"name":"prependTextHTML","paramTypes":["java.lang.String"],"doc":" Prepends HTML text to the current HTML text body (or starts it if HTML text body is missing).\n\n @param textHTML The HTML text to prepend to whatever is already there in the body.\n\n @see #prependTextHTML(File)\n @see #appendTextHTML(String)\n @see #withHTMLText(String)\n"},{"name":"appendTextHTML","paramTypes":["java.io.File"],"doc":" Delegates to {@link #appendTextHTML(String)}.\n\n @param textHTMLFile The HTML text to append to whatever is already there in the body.\n"},{"name":"appendTextHTML","paramTypes":["java.lang.String"],"doc":" Appends HTML text to the current HTML text body (or starts it if HTML text body is missing).\n\n @param textHTML The HTML text to append to whatever is already there in the body.\n\n @see #appendTextHTML(File)\n @see #prependTextHTML(String)\n @see #withHTMLText(String)\n"},{"name":"withCalendarText","paramTypes":["org.simplejavamail.api.email.CalendarMethod","java.lang.String"],"doc":" Sets the optional calendar details that clients such as Outlook might be able to handle. Will be set as alternative bodypart similar to\n {@link #withPlainText(String)} and {@link #withHTMLText(String)}.\n\n @param calendarMethod An RFC-2446 VEVENT calendar component method. Example: {@code PUBLISH, REQUEST, REPLY, ADD, CANCEL, REFRESH, COUNTER, DECLINECOUNTER}\n @param textCalendar free form text, which you should can produce with a library such as\n                        <a href=\"https://github.com/ical4j/ical4j/wiki/Examples\">ical4j</a>.\n\n @see \"The Test demo app in Simple Java Mail's source for a working example.\"\n"},{"name":"to","paramTypes":["org.simplejavamail.api.email.Recipient[]"],"doc":" Delegates to {@link #withRecipients(Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#TO}.\n"},{"name":"to","paramTypes":["java.util.Collection"],"doc":" Delegates to {@link #withRecipients(Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#TO}.\n"},{"name":"to","paramTypes":["java.lang.String","java.lang.String"],"doc":" Delegates to {@link #withRecipients(String, boolean, Collection, Message.RecipientType)}, with <code>recipientType=</code>{@link Message.RecipientType#TO} and\n <code>fixedName=true</code> assigning or overwriting existing names with the provided name.\n\n @param name               The optional name of the TO receiver(s) of the email. If multiples addresses are provided, all addresses will be in\n                           this same name.\n @param oneOrMoreAddresses Single RFC2822 address or delimited list of RFC2822 addresses of TO receiver(s). Any names included are ignored if a\n                           name was provided. Examples:\n                           <ul>\n                           <li>lolly.pop@pretzelfun.com</li>\n                           <li>Lolly Pop&lt;lolly.pop@pretzelfun.com&gt;</li>\n                           <li>Moonpie &lt;moonpie@pies.com&gt;;Daisy &lt;daisy@pies.com&gt;</li>\n                           <li>a1@b1.c1,a2@b2.c2,a3@b3.c3</li>\n                           </ul>\n"},{"name":"to","paramTypes":["java.lang.String"],"doc":" Delegates to {@link #withRecipientsWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#TO} and empty default name.\n\n @param oneOrMoreAddresses Single RFC2822 address or delimited list of RFC2822 addresses. Examples:\n                           <ul>\n                           <li>lolly.pop@pretzelfun.com</li>\n                           <li>Lolly Pop&lt;lolly.pop@pretzelfun.com&gt;</li>\n                           <li>Moonpie &lt;moonpie@pies.com&gt;;Daisy &lt;daisy@pies.com&gt;</li>\n                           <li>a1@b1.c1,a2@b2.c2,a3@b3.c3</li>\n                           </ul>\n"},{"name":"to","paramTypes":["java.lang.String","java.lang.String[]"],"doc":" Alias for {@link #toWithFixedName(String, String...)}.\n"},{"name":"to","paramTypes":["java.lang.String","java.util.Collection"],"doc":" Alias for {@link #toWithFixedName(String, Collection)}.\n"},{"name":"toMultiple","paramTypes":["java.lang.String[]"],"doc":" Delegates to {@link #withRecipientsWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#TO} and empty default name.\n"},{"name":"toMultiple","paramTypes":["java.util.Collection"],"doc":" Delegates to {@link #withRecipientsWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#TO} and empty default name.\n"},{"name":"toWithFixedName","paramTypes":["java.lang.String","java.lang.String[]"],"doc":" Delegates to {@link #withRecipientsWithFixedName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#TO}.\n"},{"name":"toWithDefaultName","paramTypes":["java.lang.String","java.lang.String[]"],"doc":" Delegates to {@link #withRecipientsWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#TO}.\n"},{"name":"toWithFixedName","paramTypes":["java.lang.String","java.util.Collection"],"doc":" Delegates to {@link #withRecipientsWithFixedName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#TO}.\n"},{"name":"toWithDefaultName","paramTypes":["java.lang.String","java.util.Collection"],"doc":" Delegates to {@link #withRecipientsWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#TO}.\n"},{"name":"to","paramTypes":["java.lang.String","javax.mail.internet.InternetAddress"],"doc":" Alias for {@link #toAddressesWithFixedName(String, InternetAddress...)}.\n"},{"name":"to","paramTypes":["javax.mail.internet.InternetAddress"],"doc":" Delegates to {@link #withAddressesWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#TO} and empty default name.\n"},{"name":"to","paramTypes":["java.lang.String","javax.mail.internet.InternetAddress[]"],"doc":" Alias for {@link #toAddressesWithFixedName(String, InternetAddress...)}.\n"},{"name":"toAddresses","paramTypes":["java.lang.String","java.util.Collection"],"doc":" Alias for {@link #toAddressesWithFixedName(String, Collection)}.\n"},{"name":"toMultiple","paramTypes":["javax.mail.internet.InternetAddress[]"],"doc":" Delegates to {@link #withAddressesWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#TO} and empty default name.\n"},{"name":"toMultipleAddresses","paramTypes":["java.util.Collection"],"doc":" Delegates to {@link #withAddressesWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#TO} and empty default name.\n"},{"name":"toAddressesWithFixedName","paramTypes":["java.lang.String","javax.mail.internet.InternetAddress[]"],"doc":" Delegates to {@link #withAddressesWithFixedName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#TO}.\n"},{"name":"toAddressesWithDefaultName","paramTypes":["java.lang.String","javax.mail.internet.InternetAddress[]"],"doc":" Delegates to {@link #withAddressesWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#TO}.\n"},{"name":"toAddressesWithFixedName","paramTypes":["java.lang.String","java.util.Collection"],"doc":" Delegates to {@link #withAddressesWithFixedName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#TO}.\n"},{"name":"toAddressesWithDefaultName","paramTypes":["java.lang.String","java.util.Collection"],"doc":" Delegates to {@link #withAddressesWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#TO}.\n"},{"name":"cc","paramTypes":["org.simplejavamail.api.email.Recipient[]"],"doc":" Delegates to {@link #withRecipients(Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#CC}.\n"},{"name":"cc","paramTypes":["java.util.Collection"],"doc":" Delegates to {@link #withRecipients(Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#CC}.\n"},{"name":"cc","paramTypes":["java.lang.String","java.lang.String"],"doc":" Delegates to {@link #withRecipients(String, boolean, Collection, Message.RecipientType)}, with <code>recipientType=</code>{@link Message.RecipientType#CC}\n and <code>fixedName=true</code> assigning or overwriting existing names with the provided name.\n\n @param name               The optional name of the CC receiver(s) of the email. If multiples addresses are provided, all addresses will be in\n                           this same name.\n @param oneOrMoreAddresses Single RFC2822 address or delimited list of RFC2822 addresses of CC receiver(s). Any names included are ignored if a\n                           name was provided. Examples:\n                           <ul>\n                           <li>lolly.pop@pretzelfun.com</li>\n                           <li>Lolly Pop&lt;lolly.pop@pretzelfun.com&gt;</li>\n                           <li>Moonpie &lt;moonpie@pies.com&gt;;Daisy &lt;daisy@pies.com&gt;</li>\n                           <li>a1@b1.c1,a2@b2.c2,a3@b3.c3</li>\n                           </ul>\n"},{"name":"cc","paramTypes":["java.lang.String"],"doc":" Delegates to {@link #withRecipientsWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#CC} and empty default name.\n\n @param oneOrMoreAddresses Single RFC2822 address or delimited list of RFC2822 addresses. Examples:\n                           <ul>\n                           <li>lolly.pop@pretzelfun.com</li>\n                           <li>Lolly Pop&lt;lolly.pop@pretzelfun.com&gt;</li>\n                           <li>Moonpie &lt;moonpie@pies.com&gt;;Daisy &lt;daisy@pies.com&gt;</li>\n                           <li>a1@b1.c1,a2@b2.c2,a3@b3.c3</li>\n                           </ul>\n"},{"name":"cc","paramTypes":["java.lang.String","java.lang.String[]"],"doc":" Alias for {@link #ccWithFixedName(String, String...)}.\n"},{"name":"cc","paramTypes":["java.lang.String","java.util.Collection"],"doc":" Alias for {@link #ccWithFixedName(String, Collection)}.\n"},{"name":"ccMultiple","paramTypes":["java.lang.String[]"],"doc":" Delegates to {@link #withRecipientsWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#CC} and empty default name.\n"},{"name":"ccAddresses","paramTypes":["java.util.Collection"],"doc":" Delegates to {@link #withRecipientsWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#CC} and empty default name.\n"},{"name":"ccWithFixedName","paramTypes":["java.lang.String","java.lang.String[]"],"doc":" Delegates to {@link #withRecipientsWithFixedName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#CC}.\n"},{"name":"ccWithDefaultName","paramTypes":["java.lang.String","java.lang.String[]"],"doc":" Delegates to {@link #withRecipientsWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#CC}.\n"},{"name":"ccWithFixedName","paramTypes":["java.lang.String","java.util.Collection"],"doc":" Delegates to {@link #withRecipientsWithFixedName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#CC}.\n"},{"name":"ccWithDefaultName","paramTypes":["java.lang.String","java.util.Collection"],"doc":" Delegates to {@link #withRecipientsWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#CC}.\n"},{"name":"cc","paramTypes":["java.lang.String","javax.mail.internet.InternetAddress"],"doc":" Alias for {@link #ccAddressesWithFixedName(String, InternetAddress...)}.\n"},{"name":"cc","paramTypes":["javax.mail.internet.InternetAddress"],"doc":" Delegates to {@link #withAddressesWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#CC} and empty default name.\n"},{"name":"cc","paramTypes":["java.lang.String","javax.mail.internet.InternetAddress[]"],"doc":" Alias for {@link #ccAddressesWithFixedName(String, InternetAddress...)}.\n"},{"name":"ccAddresses","paramTypes":["java.lang.String","java.util.Collection"],"doc":" Alias for {@link #ccAddressesWithFixedName(String, Collection)}.\n"},{"name":"ccMultiple","paramTypes":["javax.mail.internet.InternetAddress[]"],"doc":" Delegates to {@link #withAddressesWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#CC} and empty default name.\n"},{"name":"ccMultipleAddresses","paramTypes":["java.util.Collection"],"doc":" Delegates to {@link #withAddressesWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#CC} and empty default name.\n"},{"name":"ccAddressesWithFixedName","paramTypes":["java.lang.String","javax.mail.internet.InternetAddress[]"],"doc":" Delegates to {@link #withAddressesWithFixedName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#CC}.\n"},{"name":"ccAddressesWithDefaultName","paramTypes":["java.lang.String","javax.mail.internet.InternetAddress[]"],"doc":" Delegates to {@link #withAddressesWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#CC}.\n"},{"name":"ccAddressesWithFixedName","paramTypes":["java.lang.String","java.util.Collection"],"doc":" Delegates to {@link #withAddressesWithFixedName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#CC}.\n"},{"name":"ccAddressesWithDefaultName","paramTypes":["java.lang.String","java.util.Collection"],"doc":" Delegates to {@link #withAddressesWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#CC}.\n"},{"name":"bcc","paramTypes":["org.simplejavamail.api.email.Recipient[]"],"doc":" Delegates to {@link #withRecipients(Collection, Message.RecipientType)} with <code>fixedRecipientType=</code>{@link Message.RecipientType#BCC}.\n"},{"name":"bcc","paramTypes":["java.util.Collection"],"doc":" Delegates to {@link #withRecipients(Collection, Message.RecipientType)} with <code>fixedRecipientType=</code>{@link Message.RecipientType#BCC}.\n"},{"name":"bcc","paramTypes":["java.lang.String","java.lang.String"],"doc":" Delegates to {@link #withRecipients(String, boolean, Collection, Message.RecipientType)}, with <code>recipientType=</code>{@link Message.RecipientType#BCC}\n and <code>fixedName=true</code> assigning or overwriting existing names with the provided name.\n\n @param name               The optional name of the BCC receiver(s) of the email. If multiples addresses are provided, all addresses will be in\n                           this same name.\n @param oneOrMoreAddresses Single RFC2822 address or delimited list of RFC2822 addresses of BCC receiver(s). Any names included are ignored if a\n                           name was provided. Examples:\n                           <ul>\n                           <li>lolly.pop@pretzelfun.com</li>\n                           <li>Lolly Pop&lt;lolly.pop@pretzelfun.com&gt;</li>\n                           <li>Moonpie &lt;moonpie@pies.com&gt;;Daisy &lt;daisy@pies.com&gt;</li>\n                           <li>a1@b1.c1,a2@b2.c2,a3@b3.c3</li>\n                           </ul>\n"},{"name":"bcc","paramTypes":["java.lang.String"],"doc":" Delegates to {@link #withRecipientsWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#BCC} and empty default name.\n\n @param oneOrMoreAddresses Single RFC2822 address or delimited list of RFC2822 addresses. Examples:\n                           <ul>\n                           <li>lolly.pop@pretzelfun.com</li>\n                           <li>Lolly Pop&lt;lolly.pop@pretzelfun.com&gt;</li>\n                           <li>Moonpie &lt;moonpie@pies.com&gt;;Daisy &lt;daisy@pies.com&gt;</li>\n                           <li>a1@b1.c1,a2@b2.c2,a3@b3.c3</li>\n                           </ul>\n"},{"name":"bcc","paramTypes":["java.lang.String","java.lang.String[]"],"doc":" Alias for {@link #bccWithFixedName(String, String...)}.\n"},{"name":"bcc","paramTypes":["java.lang.String","java.util.Collection"],"doc":" Alias for {@link #bccWithFixedName(String, Collection)}.\n"},{"name":"bccMultiple","paramTypes":["java.lang.String[]"],"doc":" Delegates to {@link #withRecipientsWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#BCC} and empty default name.\n"},{"name":"bccAddresses","paramTypes":["java.util.Collection"],"doc":" Delegates to {@link #withRecipientsWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#BCC} and empty default name.\n"},{"name":"bccWithFixedName","paramTypes":["java.lang.String","java.lang.String[]"],"doc":" Delegates to {@link #withRecipientsWithFixedName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#BCC}.\n"},{"name":"bccWithDefaultName","paramTypes":["java.lang.String","java.lang.String[]"],"doc":" Delegates to {@link #withRecipientsWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#BCC}.\n"},{"name":"bccWithFixedName","paramTypes":["java.lang.String","java.util.Collection"],"doc":" Delegates to {@link #withRecipientsWithFixedName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#BCC}.\n"},{"name":"bccWithDefaultName","paramTypes":["java.lang.String","java.util.Collection"],"doc":" Delegates to {@link #withRecipientsWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#BCC}.\n"},{"name":"bcc","paramTypes":["java.lang.String","javax.mail.internet.InternetAddress"],"doc":" Alias for {@link #bccAddressesWithFixedName(String, InternetAddress...)}.\n"},{"name":"bcc","paramTypes":["javax.mail.internet.InternetAddress"],"doc":" Delegates to {@link #withAddressesWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#BCC} and empty default name.\n"},{"name":"bcc","paramTypes":["java.lang.String","javax.mail.internet.InternetAddress[]"],"doc":" Alias for {@link #bccAddressesWithFixedName(String, InternetAddress...)}.\n"},{"name":"bccAddresses","paramTypes":["java.lang.String","java.util.Collection"],"doc":" Alias for {@link #bccAddressesWithFixedName(String, Collection)}.\n"},{"name":"bccMultiple","paramTypes":["javax.mail.internet.InternetAddress[]"],"doc":" Delegates to {@link #withAddressesWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#BCC} and empty default name.\n"},{"name":"bccMultipleAddresses","paramTypes":["java.util.Collection"],"doc":" Delegates to {@link #withAddressesWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#BCC} and empty default name.\n"},{"name":"bccAddressesWithFixedName","paramTypes":["java.lang.String","javax.mail.internet.InternetAddress[]"],"doc":" Delegates to {@link #withAddressesWithFixedName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#BCC}.\n"},{"name":"bccAddressesWithDefaultName","paramTypes":["java.lang.String","javax.mail.internet.InternetAddress[]"],"doc":" Delegates to {@link #withAddressesWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#BCC}.\n"},{"name":"bccAddressesWithFixedName","paramTypes":["java.lang.String","java.util.Collection"],"doc":" Delegates to {@link #withAddressesWithFixedName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#BCC}.\n"},{"name":"bccAddressesWithDefaultName","paramTypes":["java.lang.String","java.util.Collection"],"doc":" Delegates to {@link #withAddressesWithDefaultName(String, Collection, Message.RecipientType)} with <code>recipientType=</code>{@link Message.RecipientType#BCC}.\n"},{"name":"withRecipientsWithDefaultName","paramTypes":["java.lang.String","java.util.Collection","javax.mail.Message.RecipientType"],"doc":" Delegates to {@link #withRecipients(String, boolean, Collection, Message.RecipientType)}, leaving existing names in tact and defaulting when missing.\n"},{"name":"withRecipientsWithFixedName","paramTypes":["java.lang.String","java.util.Collection","javax.mail.Message.RecipientType"],"doc":" Delegates to {@link #withRecipients(String, boolean, Collection, Message.RecipientType)}, with <code>fixedName=true</code>\n assigning or overwriting existing names with the provided name.\n"},{"name":"withRecipientsWithDefaultName","paramTypes":["java.lang.String","javax.mail.Message.RecipientType","java.lang.String[]"],"doc":" Delegates to {@link #withRecipients(String, boolean, Collection, Message.RecipientType)}.\n"},{"name":"withRecipientsWithFixedName","paramTypes":["java.lang.String","javax.mail.Message.RecipientType","java.lang.String[]"],"doc":" Delegates to {@link #withRecipients(String, boolean, Collection, Message.RecipientType)}.\n"},{"name":"withRecipients","paramTypes":["java.lang.String","boolean","javax.mail.Message.RecipientType","java.lang.String[]"],"doc":" Delegates to {@link #withRecipients(String, boolean, Collection, Message.RecipientType)}.\n"},{"name":"withRecipients","paramTypes":["java.lang.String","boolean","java.util.Collection","javax.mail.Message.RecipientType"],"doc":" Delegates to {@link #withRecipient(Recipient)} for each address found in not just the collection, but also in every individual address string\n that is in the collection.\n\n @param fixedName              Indicates whether the provided name should be applied to all addresses, or only to those where a name is\n                               missing.\n @param oneOrMoreAddressesEach Collection of addresses. Each entry itself can be a delimited list of RFC2822 addresses. Examples:\n                               <ul>\n                               <li>lolly.pop@pretzelfun.com</li>\n                               <li>Moonpie &lt;moonpie@pies.com&gt;;Daisy &lt;daisy@pies.com&gt;</li>\n                               <li>a1@b1.c1,a2@b2.c2,a3@b3.c3</li>\n                               </ul>\n"},{"name":"withAddressesWithDefaultName","paramTypes":["java.lang.String","java.util.Collection","javax.mail.Message.RecipientType"],"doc":" Delegates to {@link #withAddresses(String, boolean, Collection, Message.RecipientType)}, leaving existing names in tact and defaulting when missing.\n"},{"name":"withAddressesWithFixedName","paramTypes":["java.lang.String","java.util.Collection","javax.mail.Message.RecipientType"],"doc":" Delegates to {@link #withAddresses(String, boolean, Collection, Message.RecipientType)}, with <code>fixedName=true</code>\n assigning or overwriting existing names with the provided name.\n"},{"name":"withAddresses","paramTypes":["java.lang.String","boolean","java.util.Collection","javax.mail.Message.RecipientType"],"doc":" Delegates to {@link #withRecipient(String, String, Message.RecipientType)} for each address in the provided collection.\n\n @param fixedName Indicates whether the provided name should be applied to all addresses, or only to those where a name is missing.\n"},{"name":"withRecipients","paramTypes":["java.util.Collection"],"doc":" Delegates to {@link #withRecipients(Collection, Message.RecipientType)} with {@link Message.RecipientType} left empty (so it will use the original values).\n"},{"name":"withRecipients","paramTypes":["org.simplejavamail.api.email.Recipient[]"],"doc":" Delegates to {@link #withRecipients(Collection, Message.RecipientType)} with {@link Message.RecipientType} left empty (so it will use the original values).\n"},{"name":"withRecipients","paramTypes":["java.util.Collection","javax.mail.Message.RecipientType"],"doc":" Delegates to {@link #withRecipient(String, String, Message.RecipientType)} for each recipient in the provided collection, optionally fixing the\n recipientType for all recipients to the provided type.\n\n @param fixedRecipientType Optional. Fixes all recipients to the given type. If omitted, the types are not removed, but kept as-is.\n"},{"name":"withRecipient","paramTypes":["java.lang.String","javax.mail.Message.RecipientType"],"doc":" Delegates to {@link #withRecipient(String, String, Message.RecipientType)} with the name omitted.\n"},{"name":"withRecipient","paramTypes":["java.lang.String","java.lang.String","javax.mail.Message.RecipientType"],"doc":" Adds a new {@link Recipient} instance with the given name, address and {@link Message.RecipientType}.\n <p>\n Note that the email address must be a single address according to RFC2822 format. Name can be provided explicitly or as part of the RFC2822 email\n address or omitted completely. If provided as method argument, the name overrides any nested name.\n\n @param name          Optional explicit name. Can be included in the email address instead, or omitted completely. A name will show as {@code\n                      \"Name Here <address@domain.com>\"}\n @param singleAddress A single address according to RFC2822 format with or without personal name.\n @param recipientType Optional type of recipient. This is needed for TO, CC and BCC, but not for <em>bounceTo</em>, <em>returnReceiptTo</em>,\n                      <em>replyTo</em>, <em>from</em> etc.\n"},{"name":"withRecipient","paramTypes":["org.simplejavamail.api.email.Recipient"],"doc":" Adds a new {@link Recipient} instance as copy of the provided recipient (copying name, address and {@link Message.RecipientType}).\n <p>\n Note that the email address must be a single address according to RFC2822 format. Name can be provided explicitly or as part of the RFC2822 email\n address or omitted completely.\n"},{"name":"withEmbeddedImageAutoResolutionForFiles","paramTypes":["boolean"],"doc":" Enables auto resolution of file datasources for embedded images.\n <p>\n Normally, you would manually markup your HTML with images using {@code cid:<some_id>} and then add an embedded image\n resource with the same name ({@code emailBuilder.withEmbeddedImage(..)}). With auto-file-resolution, you can just\n refer to the file instead and the data will be included dynamically with a generated <em>cid</em>.\n\n @param embeddedImageAutoResolutionForFiles Enables auto resolution of file datasources for embedded images.\n\n @see #withEmbeddedImageBaseDir(String)\n @see #allowingEmbeddedImageOutsideBaseDir(boolean)\n"},{"name":"withEmbeddedImageAutoResolutionForClassPathResources","paramTypes":["boolean"],"doc":" Enables auto resolution of classpath datasources for embedded images.\n <p>\n Normally, you would manually markup your HTML with images using {@code cid:<some_id>} and then add an embedded image\n resource with the same name ({@code emailBuilder.withEmbeddedImage(..)}). With auto-classpath-resolution, you can just\n refer to the resource on the classpath instead and the data will be included dynamically with a generated <em>cid</em>.\n\n @param embeddedImageAutoResolutionForClassPathResources Enables auto resolution of classpath datasources for embedded images.\n\n @see #withEmbeddedImageBaseClassPath(String)\n @see #allowingEmbeddedImageOutsideBaseClassPath(boolean)\n"},{"name":"withEmbeddedImageAutoResolutionForURLs","paramTypes":["boolean"],"doc":" Enables auto resolution of URL's for embedded images.\n <p>\n Normally, you would manually markup your HTML with images using {@code cid:<some_id>} and then add an embedded image\n resource with the same name ({@code emailBuilder.withEmbeddedImage(..)}). With auto-URL-resolution, you can just\n refer to the hosted image instead and the data will be downloaded and included dynamically with a generated <em>cid</em>.\n\n @param embeddedImageAutoResolutionForURLs Enables auto resolution of URL's for embedded images.\n\n @see #withEmbeddedImageBaseUrl(String)\n @see #withEmbeddedImageBaseUrl(URL)\n @see #allowingEmbeddedImageOutsideBaseUrl(boolean)\n"},{"name":"withEmbeddedImageBaseDir","paramTypes":["java.lang.String"],"doc":" Sets the base folder used when resolving images sources in HTML text. Without this, the folder needs to be an absolute path (or a classpath/url resource).\n <p>\n Generally you would manually use src=\"cid:image_name\", but files and url's will be located as well dynamically.\n\n @param embeddedImageBaseDir The base folder used when resolving images sources in HTML text.\n\n @see #withEmbeddedImageAutoResolutionForFiles(boolean)\n @see #allowingEmbeddedImageOutsideBaseDir(boolean)\n"},{"name":"withEmbeddedImageBaseClassPath","paramTypes":["java.lang.String"],"doc":" Sets the classpath base used when resolving images sources in HTML text. Without this, the resource needs to be an absolute path (or a file/url resource).\n <p>\n Generally you would manually use src=\"cid:image_name\", but files and url's will be located as well dynamically.\n\n @param embeddedImageBaseClassPath The classpath base used when resolving images sources in HTML text.\n\n @see #withEmbeddedImageAutoResolutionForClassPathResources(boolean)\n @see #allowingEmbeddedImageOutsideBaseClassPath(boolean)\n"},{"name":"withEmbeddedImageBaseUrl","paramTypes":["java.lang.String"],"doc":" Delegates to {@link #withEmbeddedImageBaseUrl(URL)}.\n\n @param embeddedImageBaseUrl The base URL used when resolving images sources in HTML text.\n\n @see #withEmbeddedImageAutoResolutionForURLs(boolean)\n @see #allowingEmbeddedImageOutsideBaseUrl(boolean)\n"},{"name":"withEmbeddedImageBaseUrl","paramTypes":["java.net.URL"],"doc":" Sets the base URL used when resolving images sources in HTML text. Without this, the resource needs to be an absolute URL (or a file/classpath resource).\n <p>\n Generally you would manually use src=\"cid:image_name\", but files and url's will be located as well dynamically.\n\n @param embeddedImageBaseUrl The base URL used when resolving images sources in HTML text.\n\n @see #withEmbeddedImageAutoResolutionForURLs(boolean)\n @see #allowingEmbeddedImageOutsideBaseUrl(boolean)\n"},{"name":"allowingEmbeddedImageOutsideBaseDir","paramTypes":["boolean"],"doc":" Dictates whether files will be resolved for embedded images when they are not nested under the baseDir (if baseDir is set).\n\n @param allowEmbeddedImageOutsideBaseDir Whether files should be resolved that reside outside of the baseDir (if set)\n\n @see #withEmbeddedImageAutoResolutionForFiles(boolean)\n @see #withEmbeddedImageBaseDir(String)\n"},{"name":"allowingEmbeddedImageOutsideBaseClassPath","paramTypes":["boolean"],"doc":" Dictates whether sources will be resolved for embedded images when they are not nested under the baseClassPath (if baseClassPath is set).\n\n @param allowEmbeddedImageOutsideBaseClassPath Whether image sources should be resolved that reside outside of the baseClassPath (if set)\n\n @see #withEmbeddedImageAutoResolutionForClassPathResources(boolean)\n @see #withEmbeddedImageBaseClassPath(String)\n"},{"name":"allowingEmbeddedImageOutsideBaseUrl","paramTypes":["boolean"],"doc":" Dictates whether url's will be resolved for embedded images when they are not nested under the baseUrl (if baseUrl is set).\n\n @param allowEmbeddedImageOutsideBaseUrl Whether url's should be resolved that reside outside of the baseUrl (if set)\n\n @see #withEmbeddedImageAutoResolutionForURLs(boolean)\n @see #withEmbeddedImageBaseUrl(String)\n @see #withEmbeddedImageBaseUrl(URL)\n"},{"name":"embeddedImageAutoResolutionMustBeSuccesful","paramTypes":["boolean"],"doc":" When embedded image auto resolution is enabled, this option will make sure unresolved images sources result in an exception.\n <p>\n Not using this option effectively means a more lenient approach to image sources.\n <p>\n Note: It also allows you to work with URL's as image sources that can't be resolved at time of sending, but that makes sense\n when viewing the email in some client (eg. relative url's).\n\n @param embeddedImageAutoResolutionMustBeSuccesful Whether auto resolution is enforced and bubbles up failure to do so.\n"},{"name":"withEmbeddedImage","paramTypes":["java.lang.String","byte[]","java.lang.String"],"doc":" Delegates to {@link #withEmbeddedImage(String, DataSource)}, with a named {@link ByteArrayDataSource} created using the provided name, data and\n mimetype.\n\n @param name     The name of the image as being referred to from the message content body (eg. 'signature').\n @param data     The byte data of the image to be embedded.\n @param mimetype The content type of the given data (eg. \"image/gif\" or \"image/jpeg\").\n"},{"name":"withEmbeddedImage","paramTypes":["java.lang.String","javax.activation.DataSource"],"doc":" Adds image data to this email that can be referred to from the email HTML body. For adding images as attachment, refer to {@link\n #withAttachment(String, DataSource)} instead.\n <p>\n The provided {@link DataSource} is assumed to be of mimetype png, jpg or whatever the email client supports as valid image embedded in HTML\n content.\n\n @param name      The name of the image as being referred to from the message content body (eg. 'src=\"cid:yourImageName\"'). If not provided, the\n                  name of the given data source is used instead.\n @param imagedata The image data.\n\n @see EmailPopulatingBuilder#withEmbeddedImage(String, byte[], String)\n @see EmailPopulatingBuilder#withEmbeddedImages(List)\n"},{"name":"withEmbeddedImages","paramTypes":["java.util.List"],"doc":" Delegates to {@link #withEmbeddedImage(String, DataSource)} for each embedded image.\n"},{"name":"withHeaders","paramTypes":["java.util.Map"],"doc":" Delegates to {@link #withHeader(String, Object)} for each header in the provided {@code Map}.\n"},{"name":"withHeader","paramTypes":["java.lang.String","java.lang.Object"],"doc":" Adds a header which will be included in the email. The value is stored as a <code>String</code>.\n\n @param name  The name of the header. Example: <code>withHeader(\"X-Priority\", 2)</code>\n @param value The value of the header, which will be stored using {@link String#valueOf(Object)}.\n\n @see #withHeaders(Map)\n"},{"name":"withAttachment","paramTypes":["java.lang.String","byte[]","java.lang.String"],"doc":" Delegates to {@link #withAttachment(String, DataSource)}, with a named {@link ByteArrayDataSource} created using the provided name, data and\n mimetype.\n\n @param name     Optional name of the attachment (eg. 'filename.ext'). If omitted, the internal name of the datasource is used. If that too is\n                 empty, a name will be generated using {@link java.util.UUID}.\n @param data     The binary data of the attachment.\n @param mimetype The content type of the given data (eg. \"plain/text\", \"image/gif\" or \"application/pdf\").\n\n @see #withAttachment(String, DataSource)\n @see #withAttachments(List)\n"},{"name":"withAttachment","paramTypes":["java.lang.String","javax.activation.DataSource"],"doc":" Adds an attachment to the email message, which will be shown in the email client as seperate files available for download or inline display if\n the client supports it (for example, most browsers these days display PDF's in a popup).\n <p>\n <strong>Note</strong>: for embedding images instead of attaching them for download, refer to {@link #withEmbeddedImage(String, DataSource)} instead.\n\n @param name     Optional name of the attachment (eg. 'filename.ext'). If omitted, the internal name of the datasource is used. If that too is\n                 empty, a name will be generated using {@link java.util.UUID}.\n @param filedata The attachment data.\n\n @see #withAttachment(String, byte[], String)\n @see #withAttachments(List)\n"},{"name":"withAttachments","paramTypes":["java.util.List"],"doc":" Delegates to {@link #withAttachment(String, DataSource)} for each attachment.\n"},{"name":"signWithDomainKey","paramTypes":["byte[]","java.lang.String","java.lang.String"],"doc":" Delegates to {@link #signWithDomainKey(InputStream, String, String)} with a {@link ByteArrayInputStream} wrapped around the prodived {@code\n dkimPrivateKey} data.\n <p>\n <strong>Note:</strong> this only works in combination with the {@value org.simplejavamail.internal.modules.DKIMModule#NAME}.\n"},{"name":"signWithDomainKey","paramTypes":["java.lang.String","java.lang.String","java.lang.String"],"doc":" Delegates to {@link #signWithDomainKey(InputStream, String, String)} with a {@link ByteArrayInputStream} wrapped around the prodived {@code\n dkimPrivateKey} string converted to UTF_8 byte array.\n <p>\n <strong>Note:</strong> this only works in combination with the {@value org.simplejavamail.internal.modules.DKIMModule#NAME}.\n"},{"name":"signWithDomainKey","paramTypes":["java.io.InputStream","java.lang.String","java.lang.String"],"doc":" Primes this email for signing with a DKIM domain key. Actual signing is done when sending using a <code>Mailer</code>.\n <p>\n <strong>Note:</strong> this only works in combination with the {@value org.simplejavamail.internal.modules.DKIMModule#NAME}.\n\n @param dkimPrivateKeyInputStream De key content used to sign for the sending party.\n @param signingDomain             The domain being authorized to send.\n @param dkimSelector              Additional domain specifier.\n\n @see <a href=\"https://postmarkapp.com/guides/dkim\">more on DKIM 1</a>\n @see <a href=\"https://github.com/markenwerk/java-utils-mail-dkim\">more on DKIM 2</a>\n @see <a href=\"http://www.gettingemaildelivered.com/dkim-explained-how-to-set-up-and-use-domainkeys-identified-mail-effectively\">more on DKIM 3</a>\n @see <a href=\"https://en.wikipedia.org/wiki/DomainKeys_Identified_Mail\">more on DKIM 4</a>\n @see #signWithDomainKey(byte[], String, String)\n @see #signWithDomainKey(String, String, String)\n @see #signWithDomainKey(File, String, String)\n"},{"name":"signWithDomainKey","paramTypes":["java.io.File","java.lang.String","java.lang.String"],"doc":" As {@link #signWithDomainKey(InputStream, String, String)}, but with a File reference that is later read as {@code InputStream}.\n <p>\n <strong>Note:</strong> this only works in combination with the {@value org.simplejavamail.internal.modules.DKIMModule#NAME}.\n"},{"name":"signWithSmime","paramTypes":["org.simplejavamail.api.mailer.config.Pkcs12Config"],"doc":" Signs this email with an <a href=\"https://tools.ietf.org/html/rfc5751\">S/MIME</a> signature, so the receiving client\n can verify whether the email content was tampered with.\n <p>\n <strong>Note:</strong> this only works in combination with the {@value org.simplejavamail.internal.modules.SMIMEModule#NAME}.\n\n @see <a href=\"https://en.wikipedia.org/wiki/S/MIME\">S/MIME on Wikipedia</a>\n @see <a href=\"https://www.globalsign.com/en/blog/what-is-s-mime/\">Primer on S/MIME</a>\n"},{"name":"signWithSmime","paramTypes":["java.io.File","java.lang.String","java.lang.String","java.lang.String"],"doc":" Delegates to {@link #signWithSmime(InputStream, String, String, String)}.\n <p>\n <strong>Note:</strong> this only works in combination with the {@value org.simplejavamail.internal.modules.SMIMEModule#NAME}.\n\n @param pkcs12StoreFile The key store file to use to find the indicated key\n @param storePassword The store's password\n @param keyAlias The name of the certificate in the key store to use\n @param keyPassword The password of the certificate\n"},{"name":"signWithSmime","paramTypes":["java.io.InputStream","java.lang.String","java.lang.String","java.lang.String"],"doc":" Delegates to {@link #signWithSmime(byte[], String, String, String)}.\n <p>\n <strong>Note:</strong> this only works in combination with the {@value org.simplejavamail.internal.modules.SMIMEModule#NAME}.\n"},{"name":"signWithSmime","paramTypes":["byte[]","java.lang.String","java.lang.String","java.lang.String"],"doc":" Delegates to {@link #signWithSmime(Pkcs12Config)}.\n <p>\n <strong>Note:</strong> this only works in combination with the {@value org.simplejavamail.internal.modules.SMIMEModule#NAME}.\n\n @param pkcs12StoreData The key store file to use to find the indicated key\n @param storePassword The store's password\n @param keyAlias The name of the certificate in the key store to use\n @param keyPassword The password of the certificate\n"},{"name":"encryptWithSmime","paramTypes":["java.io.InputStream"],"doc":" Delegates to {@link #encryptWithSmime(X509Certificate)} using the provided PEM file.\n <p>\n <strong>Note:</strong> this only works in combination with the {@value org.simplejavamail.internal.modules.SMIMEModule#NAME}.\n\n @param pemStream A PEM encoded file that will be read as X509Certificate.\n"},{"name":"encryptWithSmime","paramTypes":["java.lang.String"],"doc":" Delegates to {@link #encryptWithSmime(InputStream)} using the provided PEM file.\n <p>\n <strong>Note:</strong> this only works in combination with the {@value org.simplejavamail.internal.modules.SMIMEModule#NAME}.\n\n @param pemFile A PEM encoded file that will be read as X509Certificate.\n"},{"name":"encryptWithSmime","paramTypes":["java.io.File"],"doc":" Delegates to {@link #encryptWithSmime(InputStream)} using the provided PEM file.\n <p>\n <strong>Note:</strong> this only works in combination with the {@value org.simplejavamail.internal.modules.SMIMEModule#NAME}.\n\n @param pemFile A PEM encoded file that will be read as X509Certificate.\n"},{"name":"encryptWithSmime","paramTypes":["java.security.cert.X509Certificate"],"doc":" Encrypts this email with a X509 certificate according to the <a href=\"https://tools.ietf.org/html/rfc5751\">S/MIME spec</a>\n signature.\n <p>\n You can sign this email with the public key you received from your recipient. The recipient then is the only person that\n can decrypt the email with his or her private key.\n <p>\n <strong>Note:</strong> this only works in combination with the {@value org.simplejavamail.internal.modules.SMIMEModule#NAME}.\n\n @param x509Certificate The recipient's public key to use for encryption.\n\n @see <a href=\"https://en.wikipedia.org/wiki/S/MIME\">S/MIME on Wikipedia</a>\n @see <a href=\"https://www.globalsign.com/en/blog/what-is-s-mime/\">Primer on S/MIME</a>\n @see <a href=\"https://github.com/markenwerk/java-utils-mail-smime\">Underlying library's documentation</a>\n"},{"name":"notMergingSingleSMIMESignedAttachment","paramTypes":[],"doc":" When the S/MIME module is loaded, S/MIME signed / encrypted attachments are decrypted and kept in a separate list. However\n if it is a single attachment and the actual attachment has mimetype \"message/rfc822\", it is assumes to be the message\n itself and by default will be merged with the top level email (basically overriding body, headers and attachments).\n <br>\n This API disables this behavior and stricly keeps all attachments as-is (still decrypted, but not merged with the email).\n <p>\n <strong>Note:</strong> this only works in combination with the {@value org.simplejavamail.internal.modules.SMIMEModule#NAME}.\n"},{"name":"withDispositionNotificationTo","paramTypes":[],"doc":" Indicates that we want to use the NPM flag {@code dispositionNotificationTo}. The actual address will default to the {@code replyToRecipient}\n first if set or else {@code fromRecipient} (the final address is determined when sending this email).\n\n @see #withDispositionNotificationTo(Recipient)\n"},{"name":"withDispositionNotificationTo","paramTypes":["java.lang.String"],"doc":" Delegates to {@link #withDispositionNotificationTo(Recipient)} with a new {@link Recipient} wrapped around the provided address.\n\n @param address The address of the receiver of the notification\n"},{"name":"withDispositionNotificationTo","paramTypes":["java.lang.String","java.lang.String"],"doc":" Delegates to {@link #withDispositionNotificationTo(Recipient)} with a new {@link Recipient} wrapped around the provided name and address.\n\n @param name Optional name of the receiver of the notification\n @param address The address of the receiver of the notification\n"},{"name":"withDispositionNotificationTo","paramTypes":["javax.mail.internet.InternetAddress"],"doc":" Delegates to {@link #withDispositionNotificationTo(Recipient)} with a new {@link Recipient} wrapped around the provided address.\n"},{"name":"withDispositionNotificationTo","paramTypes":["java.lang.String","javax.mail.internet.InternetAddress"],"doc":" Delegates to {@link #withDispositionNotificationTo(Recipient)} with a new {@link Recipient} wrapped around the provided fixed name and address.\n"},{"name":"withDispositionNotificationTo","paramTypes":["org.simplejavamail.api.email.Recipient"],"doc":" Indicates the this email should use the <a href=\"https://tools.ietf.org/html/rfc8098\">NPM flag \"Disposition-Notification-To\"</a> with the given\n preconfigred {@link Recipient}. This flag can be used to request a return receipt from the recipient to signal that the recipient has read the\n email.\n <p>\n This flag may be ignored by SMTP clients (for example gmail ignores it completely, while the Google Apps business suite honors it).\n\n @see #withDispositionNotificationTo()\n @see #withDispositionNotificationTo(String)\n @see #withDispositionNotificationTo(String, String)\n"},{"name":"withReturnReceiptTo","paramTypes":[],"doc":" Indicates that we want to use the flag {@code returnReceiptTo}. The actual address will default to the {@code replyToRecipient} first if set\n or else {@code fromRecipient} (the final address is determined when sending the email).\n <p>\n For more detailed information, refer to {@link #withReturnReceiptTo(Recipient)}.\n"},{"name":"withReturnReceiptTo","paramTypes":["java.lang.String"],"doc":" Delegates to {@link #withReturnReceiptTo(Recipient)} with a new {@link Recipient} wrapped around the provided address.\n\n @param address The address of the receiver of the bounced email\n"},{"name":"withReturnReceiptTo","paramTypes":["java.lang.String","java.lang.String"],"doc":" Delegates to {@link #withReturnReceiptTo(Recipient)} with a new {@link Recipient} wrapped around the provided name and address.\n\n @param name Name of the receiver of the receipt notification\n @param address The address of the receiver of the receipt notification\n"},{"name":"withReturnReceiptTo","paramTypes":["javax.mail.internet.InternetAddress"],"doc":" Delegates to {@link #withReturnReceiptTo(Recipient)} with a new {@link Recipient} wrapped around the provided address.\n"},{"name":"withReturnReceiptTo","paramTypes":["java.lang.String","javax.mail.internet.InternetAddress"],"doc":" Delegates to {@link #withReturnReceiptTo(Recipient)} with a new {@link Recipient} wrapped around the provided fixed name and address.\n"},{"name":"withReturnReceiptTo","paramTypes":["org.simplejavamail.api.email.Recipient"],"doc":" Indicates that this email should use the <a href=\"https://en.wikipedia.org/wiki/Return_receipt\">RRT flag \"Return-Receipt-To\"</a> with the\n preconfigured {@link Recipient}. This flag can be used to request a notification from the SMTP server recipient to signal that the recipient\n has read the email.\n <p>\n This flag is rarely used, but your mail server / client might implement this flag to automatically send back a notification that the email was\n received on the mail server or opened in the client, depending on the chosen implementation.\n"},{"name":"fixingSentDate","paramTypes":["java.util.Date"],"doc":" When the an email is sent it is converted to a MimeMessage at which time the sent-date is filled with the current date. With this method\n this can be fixed to a date of choice.\n <p>\n <strong>Note:</strong> the sent date is user-controlled. Only when converting an email, Simple Java Mail might fill the sent-date.\n\n @param sentDate The date to use as sent date.\n"},{"name":"clearId","paramTypes":[],"doc":" Resets <em>id</em> to empty.\n"},{"name":"clearFromRecipient","paramTypes":[],"doc":" Resets <em>fromRecipient</em> to empty.\n"},{"name":"clearReplyTo","paramTypes":[],"doc":" Resets <em>replyToRecipient</em> to empty.\n"},{"name":"clearBounceTo","paramTypes":[],"doc":" Resets <em>bounceToRecipient</em> to empty.\n"},{"name":"clearPlainText","paramTypes":[],"doc":" Resets <em>text</em> to empty.\n"},{"name":"clearHTMLText","paramTypes":[],"doc":" Resets <em>textHTML</em> to empty.\n"},{"name":"clearSubject","paramTypes":[],"doc":" Resets <em>subject</em> to empty.\n"},{"name":"clearRecipients","paramTypes":[],"doc":" Resets <em>recipients</em> to empty.\n"},{"name":"clearEmbeddedImageBaseDir","paramTypes":[],"doc":" Resets base dir for embedded images to {@code null}.\n"},{"name":"clearEmbeddedImageBaseClassPath","paramTypes":[],"doc":" Resets classpath base for embedded images to {@code null}.\n"},{"name":"clearEmbeddedImageBaseUrl","paramTypes":[],"doc":" Resets base URL for embedded images to {@code null}.\n"},{"name":"clearEmbeddedImages","paramTypes":[],"doc":" Resets <em>embeddedImages</em> to empty.\n"},{"name":"clearAttachments","paramTypes":[],"doc":" Resets <em>attachments</em> to empty.\n"},{"name":"clearHeaders","paramTypes":[],"doc":" Resets <em>headers</em> to empty.\n"},{"name":"clearDkim","paramTypes":[],"doc":" Resets all dkim properties to empty.\n <p>\n <strong>Note:</strong> this only works in combination with the {@value org.simplejavamail.internal.modules.DKIMModule#NAME}.\n"},{"name":"clearSmime","paramTypes":[],"doc":" For signing and encrypting this email when sending, resets all S/MIME properties to empty.\n <p>\n <strong>Note:</strong> this only works in combination with the {@value org.simplejavamail.internal.modules.SMIMEModule#NAME}.\n\n @see #signWithSmime(Pkcs12Config)\n @see #encryptWithSmime(X509Certificate)\n"},{"name":"clearDispositionNotificationTo","paramTypes":[],"doc":" Resets <em>dispositionNotificationTo</em> to empty.\n"},{"name":"clearReturnReceiptTo","paramTypes":[],"doc":" Resets <em>returnReceiptTo</em> to empty.\n"},{"name":"clearSentDate","paramTypes":[],"doc":" Clears the fixed <em>sent-date</em> so that the current date is used again at the time of sending.\n"},{"name":"clearSMIMESignedAttachmentMergingBehavior","paramTypes":[],"doc":" When readig and converting an email, this flag makes the behavior revert back to the default merging\n behavior for single S/MIME signed attachments, which is that it <em>is</em> merged into the root message.\n <p>\n This can be useful when copying an {@link Email} that <em>was</em> merged (default behavior), to unmerge it.\n <p>\n <strong>Note:</strong> this only works in combination with the {@value org.simplejavamail.internal.modules.SMIMEModule#NAME}.\n"},{"name":"getId","paramTypes":[],"doc":" @see #fixingMessageId(String)\n"},{"name":"getFromRecipient","paramTypes":[],"doc":" @see #from(Recipient)\n"},{"name":"getReplyToRecipient","paramTypes":[],"doc":" @see #withReplyTo(Recipient)\n"},{"name":"getBounceToRecipient","paramTypes":[],"doc":" @see #withBounceTo(Recipient)\n"},{"name":"getText","paramTypes":[],"doc":" @see #withPlainText(String)\n"},{"name":"getTextHTML","paramTypes":[],"doc":" @see #withHTMLText(String)\n"},{"name":"getCalendarMethod","paramTypes":[],"doc":" @see #withCalendarText(CalendarMethod, String)\n"},{"name":"getSubject","paramTypes":[],"doc":" @see #withSubject(String)\n"},{"name":"getRecipients","paramTypes":[],"doc":" @see #to(Recipient...)\n @see #cc(Recipient...)\n @see #bcc(Recipient...)\n"},{"name":"getEmbeddedImages","paramTypes":[],"doc":" @see #withEmbeddedImage(String, DataSource)\n"},{"name":"getAttachments","paramTypes":[],"doc":" @see #withAttachment(String, DataSource)\n"},{"name":"getDecryptedAttachments","paramTypes":[],"doc":" If the S/MIME library is loaded, this method returns a copy list of the attachments, but with any signed\n attachments replaced with decrypted ones.\n <p>\n <strong>Note:</strong> this only works in combination with the {@value org.simplejavamail.internal.modules.SMIMEModule#NAME}.\n"},{"name":"getHeaders","paramTypes":[],"doc":" @see #withHeader(String, Object)\n @see EmailStartingBuilder#replyingTo(MimeMessage, boolean, String)\n"},{"name":"getDkimPrivateKeyData","paramTypes":[],"doc":" @see #signWithDomainKey(InputStream, String, String)\n @see #signWithDomainKey(byte[], String, String)\n @see #signWithDomainKey(File, String, String)\n"},{"name":"getDkimSigningDomain","paramTypes":[],"doc":" @see #signWithDomainKey(InputStream, String, String)\n @see #signWithDomainKey(File, String, String)\n"},{"name":"getDkimSelector","paramTypes":[],"doc":" @see #signWithDomainKey(InputStream, String, String)\n @see #signWithDomainKey(File, String, String)\n"},{"name":"isUseDispositionNotificationTo","paramTypes":[],"doc":" @see #withDispositionNotificationTo()\n @see #withDispositionNotificationTo(Recipient)\n"},{"name":"getDispositionNotificationTo","paramTypes":[],"doc":" @see #withDispositionNotificationTo()\n @see #withDispositionNotificationTo(Recipient)\n"},{"name":"isUseReturnReceiptTo","paramTypes":[],"doc":" @see #withReturnReceiptTo()\n @see #withReturnReceiptTo(Recipient)\n"},{"name":"getReturnReceiptTo","paramTypes":[],"doc":" @see #withReturnReceiptTo()\n @see #withReturnReceiptTo(Recipient)\n"},{"name":"getEmailToForward","paramTypes":[],"doc":" @see EmailStartingBuilder#forwarding(MimeMessage)\n"},{"name":"getOriginalSmimeDetails","paramTypes":[],"doc":" If this Email instance was the result of a conversion in which the source message was S/MIME signed / encrypted,\n this field will be filled for historical purpose.\n <p>\n For example, you can use it to determine if the message was encrypted or signed and also who did the signing.\n <p>\n <strong>Note:</strong> this only works in combination with the {@value org.simplejavamail.internal.modules.SMIMEModule#NAME}.\n"},{"name":"getSmimeSignedEmail","paramTypes":[],"doc":" If the Email instance currently being built was the result of a conversion in which the source message was S/MIME\n signed / encrypted, this field will contain the decrypted MimeMessage instance.\n <p>\n By default, this message is merged into the parent email, as it is actually the same message (this behavior can be\n turned off with {@link #notMergingSingleSMIMESignedAttachment()}).\n <p>\n <strong>Note:</strong> this only works in combination with the {@value org.simplejavamail.internal.modules.SMIMEModule#NAME}.\n"},{"name":"isMergeSingleSMIMESignedAttachment","paramTypes":[],"doc":" @see #notMergingSingleSMIMESignedAttachment()\n"},{"name":"getPkcs12ConfigForSmimeSigning","paramTypes":[],"doc":" @see EmailPopulatingBuilder#signWithSmime(Pkcs12Config)\n @see EmailPopulatingBuilder#signWithSmime(InputStream, String, String, String)\n"},{"name":"getX509CertificateForSmimeEncryption","paramTypes":[],"doc":" @see EmailPopulatingBuilder#encryptWithSmime(X509Certificate)\n @see EmailPopulatingBuilder#encryptWithSmime(InputStream)\n"},{"name":"getSentDate","paramTypes":[],"doc":" @see EmailPopulatingBuilder#fixingSentDate(Date)\n"}]}