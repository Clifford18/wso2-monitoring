{"doc":" Entry Builder API for starting starting new emails.\n","fields":[{"name":"LINE_START_PATTERN","doc":" Used for replying to emails, when quoting the original email. Matches the beginning of every line.\n <p>\n <strong>Pattern used</strong>: {@code \"(?m)^\"}\n\n @see #replyingTo(MimeMessage, boolean, String)\n"},{"name":"DEFAULT_QUOTING_MARKUP","doc":" Default simple quoting markup for email replies:\n <p>\n <code>{@value}</code>\n\n @see #replyingTo(MimeMessage, boolean, String)\n"}],"enumConstants":[],"methods":[{"name":"ignoringDefaults","paramTypes":[],"doc":" Configures this builder to create an email ignoring the normal (optional) defaults that apply from property config files.\n"},{"name":"startingBlank","paramTypes":[],"doc":" Most common use case for creating a new email. Starts with an empty email, populated with defaults when set through config properties (if\n not disabled using {@link EmailStartingBuilder#ignoringDefaults()}.\n <p>\n <strong>Note:</strong> Any builder method called after this will override the default value.\n\n @return A new {@link EmailStartingBuilder} to further populate the email with.\n"},{"name":"replyingTo","paramTypes":["org.simplejavamail.api.email.Email"],"doc":" Delegates to {@link #replyingTo(MimeMessage, boolean, String)} with replyToAll set to <code>false</code> and a default HTML quoting\n template.\n"},{"name":"replyingToAll","paramTypes":["org.simplejavamail.api.email.Email"],"doc":" Delegates to {@link #replyingTo(MimeMessage, boolean, String)} with replyToAll set to <code>true</code> and a default HTML quoting\n template.\n"},{"name":"replyingToAll","paramTypes":["org.simplejavamail.api.email.Email","java.lang.String"],"doc":" Delegates to {@link #replyingTo(MimeMessage, boolean, String)} with replyToAll set to <code>true</code>.\n\n @see #DEFAULT_QUOTING_MARKUP\n"},{"name":"replyingTo","paramTypes":["org.simplejavamail.api.email.Email","java.lang.String"],"doc":" Delegates to {@link #replyingTo(MimeMessage, boolean, String)} with replyToAll set to <code>false</code>.\n"},{"name":"replyingTo","paramTypes":["javax.mail.internet.MimeMessage"],"doc":" Delegates to {@link #replyingTo(MimeMessage, boolean, String)} with replyToAll set to <code>false</code> and a default HTML quoting\n template.\n\n @param message MimeMessage to reply to with new email.\n"},{"name":"replyingTo","paramTypes":["javax.mail.internet.MimeMessage","java.lang.String"],"doc":" Delegates to {@link #replyingTo(MimeMessage, boolean, String)} with replyToAll set to <code>false</code>.\n\n @param message MimeMessage to reply to with new email.\n @param customQuotingTemplate HTML quoting template that should be used in the reply. Should include the substring {@code \"%s\"},\n                                    or else the original email is not embedded in the reply.\n"},{"name":"replyingToAll","paramTypes":["javax.mail.internet.MimeMessage","java.lang.String"],"doc":" Delegates to {@link #replyingTo(MimeMessage, boolean, String)} with replyToAll set to <code>true</code>.\n\n @param message The email to include as replied-to-email and who's receivers all will receive the new reply email.\n @param customQuotingTemplate HTML quoting template that should be used in the reply. Should include the substring {@code \"%s\"},\n                                    or else the original email is not embedded in the reply.\n\n @see #DEFAULT_QUOTING_MARKUP\n"},{"name":"replyingToAll","paramTypes":["javax.mail.internet.MimeMessage"],"doc":" Delegates to {@link #replyingTo(MimeMessage, boolean, String)} with replyToAll set to <code>true</code> and a default HTML quoting\n template.\n\n @param message The email to include as replied-to-email and who's receivers all will receive the new reply email.\n\n @see #DEFAULT_QUOTING_MARKUP\n"},{"name":"replyingTo","paramTypes":["javax.mail.internet.MimeMessage","boolean","java.lang.String"],"doc":" Primes the email with subject, quoted content, headers, originally embedded images and recipients needed for a valid RFC reply.\n <p>\n <strong>Note 1:</strong> replaces subject with \"Re: &lt;original subject&gt;\" (but never nested).<br>\n <strong>Note 2:</strong> always sets both plain text and HTML text, so if you update the content body, be sure to update HTML as well.<br>\n <strong>Note 3:</strong> sets body content: text is replaced with {@code \"> text\"} and HTML is replaced with the provided (or default) quoting markup\n (add your own content with {@link EmailPopulatingBuilder#prependText(String)} and {@link EmailPopulatingBuilder#prependTextHTML(String)}).\n\n @param emailMessage The message from which we harvest recipients, original content to quote (including embedded images), message ID to\n                     include.\n @param repyToAll    Indicates whether all original receivers should be included in this new reply. Also see {@link\n                     MimeMessage#reply(boolean)}.\n @param htmlTemplate HTML quoting template that should be used in the reply. Should contains the substring {@code \"%s\"}. Be advised that HTML is very limited in emails.\n\n @see #replyingTo(Email)\n @see #replyingTo(Email, String)\n @see #replyingTo(MimeMessage)\n @see #replyingTo(MimeMessage, String)\n @see #replyingToAll(Email)\n @see #replyingToAll(Email, String)\n @see #replyingToAll(MimeMessage)\n @see #replyingToAll(MimeMessage, String)\n @see <a href=\"https://javaee.github.io/javamail/FAQ#reply\">Official JavaMail FAQ on replying</a>\n @see MimeMessage#reply(boolean)\n"},{"name":"forwarding","paramTypes":["org.simplejavamail.api.email.Email"],"doc":" Delegates to {@link #forwarding(MimeMessage)} with the provided {@link Email} converted to {@link MimeMessage}.\n"},{"name":"forwarding","paramTypes":["javax.mail.internet.MimeMessage"],"doc":" Primes the email to be build with proper subject and include the forwarded email as \"message/rfc822\" bodypart (valid RFC forward).\n <p>\n <strong>Note 1</strong>: replaces subject with \"Fwd: &lt;original subject&gt;\" (nesting enabled).<br>\n <strong>Note 2</strong>: {@code Content-Disposition} will be left empty so the receiving email client can decide how to handle display\n (most will show inline, some will show as attachment instead).\n\n @param message The message to be included in the new forwarding email.\n\n @see <a href=\"https://javaee.github.io/javamail/FAQ#forward\">Official JavaMail FAQ on forwarding</a>\n @see <a href=\"https://blogs.technet.microsoft.com/exchange/2011/04/21/mixed-ing-it-up-multipartmixed-messages-and-you/\">More reading\n material</a>\n @see #forwarding(Email)\n"},{"name":"copying","paramTypes":["javax.mail.internet.MimeMessage"],"doc":" Delegates to {@link #copying(Email)}, by converting the provided message first.\n\n @param message The MimeMessage email to convert and copy to new {@link Email}.\n"},{"name":"copying","paramTypes":["org.simplejavamail.api.email.EmailPopulatingBuilder"],"doc":" Delegates to {@link #copying(Email)}, by building the email first.\n\n @see EmailPopulatingBuilder#buildEmail()\n"},{"name":"copying","paramTypes":["org.simplejavamail.api.email.Email"],"doc":" Preconfigures the builder with all the properties from the given email that are non-null.\n"}]}